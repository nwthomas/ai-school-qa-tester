{"prompt": "```python\ndef find_max(arr):\n    return max(arr)\n```", "completion": "```python\nimport unittest\n\nclass TestFindMaxFunction(unittest.TestCase):\n    def test_find_max_positive_numbers(self):\n        self.assertEqual(find_max([1, 2, 3, 4, 5]), 5)\n\n    def test_find_max_negative_numbers(self):\n        self.assertEqual(find_max([-1, -2, -3, -4, -5]), -1)\n\n    def test_find_max_mixed_numbers(self):\n        self.assertEqual(find_max([1, -2, 3, -4, 5]), 5)\n\n    def test_find_max_single_element(self):\n        self.assertEqual(find_max([1]), 1)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "def is_odd(n):", "completion": "```python\nimport unittest\n\nclass TestIsOddFunction(unittest.TestCase):\n    def test_is_odd_positive_number(self):\n        self.assertTrue(is_odd(3))\n\n    def test_is_odd_negative_number(self):\n        self.assertTrue(is_odd(-3))\n\n    def test_is_odd_even_number(self):\n        self.assertFalse(is_odd(4))\n\n    def test_is_odd_zero(self):\n        self.assertFalse(is_odd(0))\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "```python\ndef distance(x1, y1, x2, y2):\n    return ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n```", "completion": "```python\nimport unittest\n\nclass TestDistanceFunction(unittest.TestCase):\n    def test_distance_origin(self):\n        self.assertAlmostEqual(distance(0, 0, 0, 0), 0, places=7)\n\n    def test_distance_positive_coordinates(self):\n        self.assertAlmostEqual(distance(0, 0, 3, 4), 5, places=7)\n\n    def test_distance_negative_coordinates(self):\n        self.assertAlmostEqual(distance(-1, -1, -4, -5), 5, places=7)\n\n    def test_distance_mixed_coordinates(self):\n        self.assertAlmostEqual(distance(1, 2, -2, -3), 5.830951894845301, places=7)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "def distance(x1, y1, x2, y2):    return ((x2 - x1)**2 + (y2 - y1)**2)**0.5,", "completion": "```python\nimport unittest\n\nclass TestDistanceFunction(unittest.TestCase):\n    def test_distance_origin(self):\n        self.assertAlmostEqual(distance(0, 0, 0, 0), 0, places=7)\n\n    def test_distance_positive_coordinates(self):\n        self.assertAlmostEqual(distance(0, 0, 3, 4), 5, places=7)\n\n    def test_distance_negative_coordinates(self):\n        self.assertAlmostEqual(distance(-1, -1, -4, -5), 5, places=7)\n\n    def test_distance_mixed_coordinates(self):\n        self.assertAlmostEqual(distance(1, 2, -2, -3), 5.830951894845301, places=7)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
{"prompt": "```python\ndef add(a, b):\n    return a + b\n```", "completion": "```python\nimport unittest\n\nclass TestAddFunction(unittest.TestCase):\n    def test_add_positive_numbers(self):\n        self.assertEqual(add(2, 3), 5)\n\n    def test_add_negative_numbers(self):\n        self.assertEqual(add(-1, -1), -2)\n\n    def test_add_mixed_numbers(self):\n        self.assertEqual(add(-1, 1), 0)\n\n    def test_add_zero(self):\n        self.assertEqual(add(0, 0), 0)\n\nif __name__ == '__main__':\n    unittest.main()\n```"}
